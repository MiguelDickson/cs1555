
CREATE OR REPLACE TRIGGER ON_DEPOSIT 
AFTER 
INSERT on TRXLOG
FOR EACH ROW
WHEN (new.action = 'deposit')
DECLARE 
    recent_alloc number;
    money_alloc number;
    shares_bought number;
    numb_prefs number;
    cur_balance number;
    price_shares number;
    shares_not_purchased number;
BEGIN   
    SELECT :new.amount into cur_balance 
    from CUSTOMER
    WHERE (:new.login = login); 

    shares_not_purchased:= 0;
    recent_alloc:= get_last_allocation(:new.login);
    numb_prefs:= get_number_preferences(recent_alloc);
    
    for i in 1..numb_prefs LOOP
        money_alloc := get_n_preference(i, recent_alloc) * cur_balance;
        dbms_output.put_line('This amount of the deposit is allocated:');
        dbms_output.put_line(money_alloc);
        shares_bought := FLOOR(money_alloc / get_last_closing_price(get_n_prefsymbol(i, recent_alloc)));
        dbms_output.put_line('This number of shares were purchased:');
        dbms_output.put_line(shares_bought);
        cur_balance:= shares_bought * (get_last_closing_price(get_n_prefsymbol(i,recent_alloc)));
        dbms_output.put_line('Balance is now:');
        dbms_output.put_line(cur_balance);    
    END LOOP;    
        dbms_output.put_line('End balance is:');
        dbms_output.put_line(cur_balance);    
    --price_shares:= share_prices(:new.symbol, :new.num_shares, :new.t_date);
    --IF (cur_balance >= :new.num_shares)
    --THEN
    --UPDATE CUSTOMER set balance = balance - price_shares;
    --UPDATE OWNS set shares = shares + :new.num_shares;    
    --END IF;
END;
/

--
--TESTING DEPOSIT TRANSACTION

select * from customer where login = 'mike';
select * from owns where login = 'mike';

INSERT INTO TRXLOG values('0', 'mike', 'RE', '03-APR-14', 'deposit', NULL, NULL, 1000000);

select * from customer where login = 'mike';
select * from owns where login = 'mike';
