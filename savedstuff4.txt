
CREATE OR REPLACE TRIGGER ON_DEPOSIT 
AFTER 
INSERT on TRXLOG
FOR EACH ROW
WHEN (new.action = 'deposit')
DECLARE 
    recent_alloc number;
    money_alloc number;
    shares_bought number;
    numb_prefs number;
    cur_balance number;
    price_shares number;
    shares_not_purchased number;
BEGIN   
    --SELECT :new.amount into cur_balance 
    --from CUSTOMER
    --WHERE (:new.login = login); 
    cur_balance:= :new.amount;

    shares_not_purchased:= 0;
    recent_alloc:= get_last_allocation(:new.login);
    numb_prefs:= get_number_preferences(recent_alloc);
    
    for i in 1..numb_prefs LOOP
        money_alloc := get_n_preference(i, recent_alloc) * :new.amount;
        dbms_output.put_line('This amount of the current balance of the allocated amount is allocated:');
        dbms_output.put_line(money_alloc);
        shares_bought := FLOOR(money_alloc / get_last_closing_price(get_n_prefsymbol(i, recent_alloc)));
        IF (shares_bought = 0)
        THEN
        shares_not_purchased:=1;
        END IF;        
        dbms_output.put_line('This number of shares were purchased:');
        dbms_output.put_line(shares_bought);
        cur_balance:= cur_balance - (shares_bought * (get_last_closing_price(get_n_prefsymbol(i,recent_alloc))));
        dbms_output.put_line('Balance is now:');
        dbms_output.put_line(cur_balance);    
    END LOOP; 
    
        dbms_output.put_line('End balance is:');
        dbms_output.put_line(cur_balance);    
        
    IF (shares_not_purchased = 1)
        THEN
        dbms_output.put_line('Was unable to buy some shares and so placing the deposit into balance entirely.');
        UPDATE CUSTOMER set balance = balance + :new.amount;
    ELSE
        cur_balance:= :new.amount;
        
        for i in 1..numb_prefs LOOP
            money_alloc := get_n_preference(i, recent_alloc) * :new.amount;
            shares_bought := FLOOR(money_alloc / get_last_closing_price(get_n_prefsymbol(i, recent_alloc)));
            UPDATE OWNS set shares = shares + shares_bought WHERE login = :new.login AND symbol = get_n_prefsymbol(i,recent_alloc);  
            cur_balance:= cur_balance - (shares_bought * (get_last_closing_price(get_n_prefsymbol(i,recent_alloc))));
            
        end loop;
        
        UPDATE CUSTOMER set balance = balance + cur_balance;
        
     END IF;           
END;
/

--TESTING SALE TRANSACTION
PROMPT Testing SALE Transaction:;
PROMPT SALE: CUSTOMER for Mike;
select * from customer where login = 'mike';
PROMPT SALE: OWNS for Mike;
select * from owns where login = 'mike';

INSERT INTO TRXLOG values('0', 'mike', 'RE', '03-APR-14', 'sell', 10, 15, 150);

PROMPT SALE: TRXLOG for Mike;
select * from trxlog;
PROMPT SALE: CUSTOMER for Mike;
select * from customer where login = 'mike';
PROMPT SALE: OWNS for Mike;
select * from owns where login = 'mike';

--
--TESTING BUY TRANSACTION
PROMPT Testing BUY Transaction:;
INSERT INTO TRXLOG values('1', 'mike', 'RE', '03-APR-14', 'buy', 10, 15, 150);

PROMPT BUY: CUSTOMER for Mike;
select * from customer where login = 'mike';
PROMPT BUY: OWNS for Mike;
select * from owns where login = 'mike';

--
--TESTING DEPOSIT TRANSACTION
PROMPT Testing DEPOSIT Transaction:;
PROMPT DEPOSIT: CUSTOMER for Mike;
select * from customer where login = 'mike';
PROMPT DEPOSIT: OWNS for Mike;
select * from owns where login = 'mike';

INSERT INTO TRXLOG values('2', 'mike', 'RE', '03-APR-14', 'deposit', NULL, NULL, 1000000);

PROMPT DEPOSIT: CUSTOMER for Mike;
select * from customer where login = 'mike';
PROMPT DEPOSIT: OWNS for Mike;
select * from owns where login = 'mike';
--
--